import os
import ROOT
import json
from lzt_utils.root import rdf_to_pandas
import pandas as pd
from pathlib import Path
from typing import Iterator, Union, Dict

FILE_DIRECTORIES = [
    'EVT',
    'HIT',
    'ESD',
    'AOD',
    'NTUPLE'
]


class LztDataset:
    """
    Class for managing the dataset directories generated by lorenzetti

    Attributes
    ----------
    path : str
        Path to the dataset directory
    basename : str
        Basename of the dataset files
    label : str, optional
        Dataset label, useful for plotting, by default None

    Properties
    ----------
    evt_path : str
        Path to the EVT directory
    hit_path : str
        Path to the HIT directory
    esd_path : str
        Path to the ESD directory
    aod_path : str
        Path to the AOD directory
    ntuple_path : str
        Path to the NTUPLE directory
    """

    def __init__(self,
                 path: Union[str, Path],
                 basename: str,
                 label: str = None,
                 **kwargs):
        """
        Parameters
        ----------
        path : str
            Path to the dataset directory
        basename : str
            Basename of the dataset files
        label : str, optional
            Dataset label, useful for plotting, by default None
        """
        if isinstance(path, str):
            self.path = Path(path)
        self.path = path
        self.basename = basename
        self.label = label
        self.evt_path = self.path / 'EVT'
        self.hit_path = self.path / 'HIT'
        self.esd_path = self.path / 'ESD'
        self.aod_path = self.path / 'AOD'
        self.ntuple_path = self.path / 'NTUPLE'
        self.__hit_event_counter = None
        self.__esd_event_counter = None

    def __repr__(self) -> str:
        repr_str = f'LztDataset(path={self.path}, label={self.label})'
        return repr_str
    
    @property
    def name(self) -> str:
        return self.path.name

    @property
    def hit_files(self) -> Iterator[Path]:
        """
        Iterator over the HIT files

        Returns
        -------
        Iterator[Path]
            Iterator over the HIT files
        """
        return self.hit_path.glob('*.root')

    @property
    def hit_event_counter(self) -> Dict[str, int]:
        """
        Number of completed HIT events

        Returns
        -------
        Dict[str, int]
            Dictionary with the number of events 
            from hit files. Has the following schema:
            {
                'Event': int,
                'Completed': int,
                'Timeout': int
            }
        """
        if self.__hit_event_counter is None:
            self.__hit_event_counter = {
                'Event': 0,
                'Completed': 0,
                'Timeout': 0
            }
            for hit_file in self.hit_files:
                with ROOT.TFile(str(hit_file), 'read') as f:
                    # Extracts the data from the histograms
                    hist = f.Get("Event/EventCounter")
                    self.__hit_event_counter['Event'] += \
                        hist.GetBinContent(1)
                    self.__hit_event_counter['Completed'] += \
                        hist.GetBinContent(2)
                    self.__hit_event_counter['Timeout'] += \
                        hist.GetBinContent(3)
            for key in self.__hit_event_counter:
                self.__hit_event_counter[key] = int(
                    self.__hit_event_counter[key])
        return self.__hit_event_counter

    @property
    def esd_files(self) -> Iterator[Path]:
        """
        Iterator over the ESD files

        Returns
        -------
        Iterator[Path]
            Iterator over the ESD files
        """
        return self.esd_path.glob('*.root')

    @property
    def esd_event_counter(self) -> Dict[str, int]:
        """
        Number of completed ESD events

        Returns
        -------
        Dict[str, int]
            Dictionary with the number of events 
            from esd files. Has the following schema:
            {
                'Event': int,
                'Completed': int
            }
        """
        if self.__esd_event_counter is None:
            self.__esd_event_counter = {
                'Event': 0,
                'Completed': 0
            }
            for esd_file in self.esd_files:
                with ROOT.TFile(str(esd_file), 'read') as f:
                    # Extracts the data from the histograms
                    hist = f.Get("Event/EventCounter")
                    self.__esd_event_counter['Event'] += \
                        hist.GetBinContent(1)
                    self.__esd_event_counter['Completed'] += \
                        hist.GetBinContent(2)
            for key in self.__esd_event_counter:
                self.__esd_event_counter[key] = int(
                    self.__esd_event_counter[key])
        return self.__esd_event_counter

    def get_ntuple_rdf(self) -> ROOT.RDataFrame:
        """
        Get the RDataFrame for the ntuple files

        Returns
        -------
        ROOT.RDataFrame
            RDataFrame for the ntuple
        """
        ntuple_files = [str(filename) for filename
                        in self.ntuple_path.glob('*.root')]
        rdf = ROOT.RDataFrame("events", ntuple_files)
        return rdf

    def get_ntuple_pdf(self) -> pd.DataFrame:
        """
        Get the pandas DataFrame for the ntuple files

        Returns
        -------
        pd.DataFrame
            DataFrame for the ntuple
        """
        return rdf_to_pandas(self.get_ntuple_rdf())

    def makedirs(self, directory: str) -> Path:
        """
        Create a directory inside the dataset directory

        Parameters
        ----------
        directory : str
            Directory name

        Returns
        -------
        Path
            Absolute path to the created directory
        """
        dir_path = self.path / directory
        dir_path.mkdir(parents=True, exist_ok=True)
        return dir_path.resolve()

    @classmethod
    def from_dir(cls, path: str):
        """
        Create a LztDataset object from a directory

        Parameters
        ----------
        path : str
            Path to the dataset directory

        Returns
        -------
        LztDataset
            LztDataset object

        Raises
        ------
        ValueError
            If the path is not a directory
        """
        if os.path.isdir(path):
            with open(os.path.join(path, 'dataset_info.json'), 'r') as f:
                data = json.load(f)
                return cls(path, **data)
        else:
            raise ValueError(f'{path} is not a directory')
